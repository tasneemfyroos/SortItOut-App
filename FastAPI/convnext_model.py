# -*- coding: utf-8 -*-
"""loading convnext 0615.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ME3Sxarz8hkPtMTK-0_D-kdEGG0IDosH
"""

import io
import torch
import torchvision
from torchvision import models
import torch.nn as nn

convnext = torchvision.models.convnext_tiny(pretrained=True)
for param in convnext.parameters():
  param.grad_requires = False
convnext.classifier[2] = nn.Linear(in_features=768,out_features=26, bias=True)

# Specify the path to your .pth file
file_path = "convnext_model.pth"

state_dict = torch.load(file_path, map_location=torch.device("cpu"))
# Load the model weights from the .pth file
convnext.load_state_dict(state_dict)

# Set the model to evaluation mode
convnext.eval()

import torchvision.transforms as transform
from PIL import Image

class_lab =['battery', 'brown-glass-bottles&jars', 'brown-glass-trash', 'cardboard&paper-bags', 'cardboard-boxes', 'cardboard-cartons', 'clothes', 'electronic-waste ', 'food-scraps', 'green-glass-bottles&jars', 'green-glass-trash', 'metal-trash', 'paper-books-loose-envelopes-etc', 'paper-cups', 'paper-eggcarton-coffeecuptray', 'paper-napkins-towels', 'plastic-bags', 'plastic-bottle ', 'plastic-container', 'plastic-trash', 'shoes', 'tin-and-aluminium-cans-nonhazardous-aerosol', 'trash', 'white-glass-bottles&jars', 'white-glass-trash', 'yard-waste']

def showPred(image_contents):
  image = Image.open(io.BytesIO(image_contents))

  # Define the transformations to apply to the image
  transformer = transform.Compose([
          transform.Resize((224, 224)),
          transform.ToTensor(),
          # transform.Normalize((0.485, 0.456, 0.406),(0.229,0.224,0.225))
  ])

  # Apply the transformations
  input_tensor = transformer(image)
  input_batch = input_tensor.unsqueeze(0)

  # If you have a GPU, move the input tensor to the GPU
  # device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
  device = torch.device("cpu")
  input_batch = input_batch.to(device)

  # Make predictions
  with torch.no_grad():
      output = convnext(input_batch)

  # Get the predicted class label
  _, predicted_idx = torch.max(output, 1)
  predicted_label = predicted_idx.item()

  predicted_class = class_lab[predicted_label]
  return predicted_class

