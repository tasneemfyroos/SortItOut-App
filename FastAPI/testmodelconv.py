# -*- coding: utf-8 -*-
"""loading newest convnext.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nsUKhALZpEZYsLCdAB2A8vUpnGrl6s5M
"""
import io
import torch
import torchvision
from torchvision import models
import torch.nn as nn

convnext = torchvision.models.convnext_tiny(pretrained=True)
for param in convnext.parameters():
  param.grad_requires = False
convnext.classifier[2] = nn.Linear(in_features=768,out_features=14, bias=True)

# Specify the path to your .pth file
file_path = 'convnextBest_model_statedict.pth'

state_dict = torch.load(file_path, map_location=torch.device("cuda" if torch.cuda.is_available() else "cpu"))
# Load the model weights from the .pth file
convnext.load_state_dict(state_dict)

# Set the model to evaluation mode
convnext.eval()

import torchvision.transforms as transform
from PIL import Image

class_lab = ["battery","biological","brown-glass","cardboard","clothes","electronic-waste ","green-glass","metal","paper","plastic","plastic-bottle ","shoes","trash","white-glass"]

def showPred(image_contents):
  # image_path = path
  image = Image.open(io.BytesIO(image_contents))

  # Define the transformations to apply to the image
  transformer = transform.Compose([
          transform.Resize((224, 224)),
          transform.ToTensor(),
          transform.Normalize((0.485, 0.456, 0.406),(0.229,0.224,0.225))
  ])

  # Apply the transformations
  input_tensor = transformer(image)
  input_batch = input_tensor.unsqueeze(0)

  # If you have a GPU, move the input tensor to the GPU
  # device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
  device = torch.device("cpu")
  input_batch = input_batch.to(device)

  # Make predictions
  with torch.no_grad():
      output = convnext(input_batch)

  # Get the predicted class label
  _, predicted_idx = torch.max(output, 1)
  predicted_label = predicted_idx.item()

  predicted_class = class_lab[predicted_label]
  return predicted_class

# showPred("/content/drive/MyDrive/ML2/testimg/20230608_000421.jpg")

